#!/usr/bin/env node
var debug = require('debug')('caport2020messaging-Microservice');
var app = require('../app');
var db = require("../models/db");
var Room = require("../models/room").Room;
var _ = require('underscore')._;
var tu = require("../util/token");
var config = require('propertiesmanager').conf;


var gwBase=_.isEmpty(config.apiGwAuthBaseUrl) ? "" : config.apiGwAuthBaseUrl;
gwBase=_.isEmpty(config.apiVersion) ? gwBase : gwBase + "/" + config.apiVersion;

db.connect(function(err){

  if(err){
    console.log("Unable to connect to DB, err:" +err);
  }
  else{
    console.log("Connected to DB");
  }

});

process.on('SIGINT', function(code) {
    console.log("Exiting App...");
    db.disconnect(function(err,result){

    if(err){
        console.log('Unable to disconnect from database');
    }

    else{
        console.log('Disconnected from database');
    }


    process.exit(0);
    });

});




app.set('port', process.env.PORT || 3010);
var server;

if (process.env.ENABLEHTTPS ){
    app.set('port', 443);
    //How to run Express over HTTPS
    var https = require('https');
    var fs = require('fs');

    var options = {
        key : fs.readFileSync('keys/key.pem'),
        cert : fs.readFileSync('keys/key-cert.pem')
    }
    server = https.createServer(options, app).listen(app.get('port'), function() {
        debug('Express server listening on port ' + server.address().port);
        console.log('Express server HTTPS listening on port ' + server.address().port);
    });
}else {

    server = app.listen(app.get('port'), function () {
        console.log('Express server listening on port ' + server.address().port);
        debug('Express server listening on port ' + server.address().port);
    });
}


var io = require('socket.io')(server, { origins:'*:*', transports: ["websocket", "xhr-polling"]});

io.on('connection', function(socket) 
{
  socket.on('join', function(data) 
  {
    socket.join(data);
  });
});



io.use(function(socket, next){
  if (socket.handshake.query && socket.handshake.query.token )
  {
    console.log(socket.handshake.query.token) 

    tu.decodeToken(socket.handshake.query.token).then(function(result)
    {
      if(result.response.statusCode == 200 && result.body.valid == true)
      {
        var uid = result.body.token._id;
        console.log(uid);

        Room.findOne({name: socket.handshake.query.room}, "members").lean().exec().then(function(result)
        {
          console.log(result);
          if(_.isEmpty(result))
          {
            next();
            //next(new Error('Authentication error'));
          }
          else if(result.members)
          {
            if(result.members.indexOf(uid) > -1)
            {
              next();
            }
            else
            {
              next(new Error('Authentication error'));
            } 
          }
        });
      }
      else
      {
        var err = new Error();
        err.message = result.body.error_message;
        err.statusCode = result.response.statusCode;
        throw err;
      }
    }).catch(function(err)
    {
      console.log(err);
      next(new Error('Authentication error'));
    });

    //next(new Error('Authentication error'));
  }
  else
  {
    next();
  }
});



io.on('disconnect', function () {
    console.log('disconnected');
});

app.set("socketio" , io);

